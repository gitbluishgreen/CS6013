//
// Generated by JTB 1.3.2
package visitor;
import syntaxtree.*;
import java.io.PrintWriter;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class Myvisitor<A> implements GJVoidVisitor<A> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //
   class FunctionTable
   {
       Hashtable<String,String> function_arguments;
       Hashtable<String,String> local_variables;
       String return_type;
       LinkedHashMap<String,String> temp_locals;
       String this_identifier;
       public FunctionTable()
       {
           function_arguments = new Hashtable<String,String>();
           local_variables = new Hashtable<String,String>();
           temp_locals = new LinkedHashMap<String,String>();
           return_type = null;
       }
   }
   class ClassTable
   {
       public Hashtable<String,FunctionTable> functions;
       public Hashtable<String,String> class_fields;
       public String parent;
       public ClassTable()
       {
           functions = new Hashtable<String,FunctionTable>();
           class_fields = new Hashtable<String,String>();
           parent = null;
       }
   }
   String temp_identifier;//expression's identifier, naming convention is __local_num
   int temp_id_cnt = 0;//temporaries start from here.
   String type_of_expr;//what is the type of the expression?
   String tokenName;
   PrintWriter pw = new PrintWriter(System.out,true);
   Hashtable<String,ClassTable> classes =  new Hashtable<String,ClassTable>();
   ClassTable class_object;
   FunctionTable function_object;
   String current_class,current_function;
   ArrayList<String> call_arguments = new ArrayList<String>();

   String get_type(String id)
   {
       String a = function_object.local_variables.get(id);
       if(a == null)
       {
            String b = function_object.function_arguments.get(id);
            if(b == null)
            {
                String cc = current_class;
                while(cc != null)
                {
                    ClassTable co = classes.get(cc);
                    String c = co.class_fields.get(id);
                    if(c != null)
                        return c;
                    cc = co.parent;
                }
                return null;
            }
            else
                return b;
       }
       else
            return a;
   }

   String get_return_type(String class_type,String fn_name)
   {
       String cc = class_type;
       while(cc != null)
       {
           ClassTable co = classes.get(cc);
           FunctionTable x = co.functions.get(fn_name);
           if(x != null)
               return x.return_type;
            cc = co.parent;
       }
       return null;
   }
   public void visit(NodeList n, A argu) {
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
   }

   public void visit(NodeListOptional n, A argu) {
      if ( n.present() ) {
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this,argu);
            _count++;
         }
      }
   }

   public void visit(NodeOptional n, A argu) {
      if ( n.present() )
         n.node.accept(this,argu);
   }

   public void visit(NodeSequence n, A argu) {
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
   }

   public void visit(NodeToken n, A argu) {
       tokenName = n.tokenImage;
   }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> MainClass()
    * f1 -> ( TypeDeclaration() )*
    * f2 -> <EOF>
    */
   public void visit(Goal n, A argu) {
       int arg = Integer.valueOf((Integer)argu);
       temp_id_cnt = 0;
       tokenName = null;
       type_of_expr = null;
       call_arguments.clear();
       n.f0.accept(this, argu);
       n.f1.accept(this, argu);
       n.f2.accept(this, argu);    
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> "public"
    * f4 -> "static"
    * f5 -> "void"
    * f6 -> "main"
    * f7 -> "("
    * f8 -> "String"
    * f9 -> "["
    * f10 -> "]"
    * f11 -> Identifier()
    * f12 -> ")"
    * f13 -> "{"
    * f14 -> PrintStatement()
    * f15 -> "}"
    * f16 -> "}"
    */
   public void visit(MainClass n, A argu) {
       int arg = Integer.valueOf((Integer)argu);
       if(arg == 0)
       {
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        current_class = tokenName;
        class_object = new ClassTable();
        function_object = new FunctionTable();
        n.f2.accept(this, argu);
        n.f3.accept(this, argu);
        n.f4.accept(this, argu);
        n.f5.accept(this, argu);
        n.f6.accept(this, argu);
        n.f7.accept(this, argu);
        n.f8.accept(this, argu);
        n.f9.accept(this, argu);
        n.f10.accept(this, argu);
        n.f11.accept(this, argu);
        String main_arg = tokenName;
        function_object.function_arguments.put(main_arg,"String");
        function_object.return_type = "void";
        n.f12.accept(this, argu);
        n.f13.accept(this, argu);
        n.f14.accept(this, argu);
        n.f15.accept(this, argu);
        n.f16.accept(this, argu);
        class_object.functions.put("main",function_object);
        classes.put(current_class,class_object);
        class_object = null;
        function_object = null;
       }
       else if(arg == 1)
       {
            n.f0.accept(this, argu);
            n.f1.accept(this, argu);
            current_class = tokenName;
            class_object = classes.get(current_class);
            function_object = class_object.functions.get("main");
            n.f2.accept(this, argu);
            n.f3.accept(this, argu);
            n.f4.accept(this, argu);
            n.f5.accept(this, argu);
            n.f6.accept(this, argu);
            n.f7.accept(this, argu);
            n.f8.accept(this, argu);
            n.f9.accept(this, argu);
            n.f10.accept(this, argu);
            n.f11.accept(this, argu);
            String main_arg = tokenName;
            //pw.printf("class %s {\npublic static void main(String [] %s){\n",current_class,main_arg);
            n.f12.accept(this, argu);
            n.f13.accept(this, argu);
            n.f14.accept(this, argu);
            n.f15.accept(this, argu);
            n.f16.accept(this, argu);
            //pw.printf("}\n}\n");
            class_object = null;
            function_object = null;
       }
       else
       {
          n.f0.accept(this, argu);
          n.f1.accept(this, argu);
          current_class = tokenName;
          class_object = classes.get(current_class);
          function_object = class_object.functions.get("main");
          n.f2.accept(this, argu);
          n.f3.accept(this, argu);
          n.f4.accept(this, argu);
          n.f5.accept(this, argu);
          n.f6.accept(this, argu);
          n.f7.accept(this, argu);
          n.f8.accept(this, argu);
          n.f9.accept(this, argu);
          n.f10.accept(this, argu);
          n.f11.accept(this, argu);
          String main_arg = tokenName;
          pw.printf("class %s {\npublic static void main(String [] %s){\n",current_class,main_arg);
          function_object.temp_locals.forEach((k,v) -> {
               pw.printf("%s %s;\n",v,k);
          });
          n.f12.accept(this, argu);
          n.f13.accept(this, argu);
          n.f14.accept(this, argu);
          n.f15.accept(this, argu);
          n.f16.accept(this, argu);
          pw.printf("}\n}\n");
          class_object = null;
          function_object = null;
       }
   }

   /**
    * f0 -> ClassDeclaration()
    *       | ClassExtendsDeclaration()
    */
   public void visit(TypeDeclaration n, A argu) {
      n.f0.accept(this, argu);
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> ( VarDeclaration() )*
    * f4 -> ( MethodDeclaration() )*
    * f5 -> "}"
    */
   public void visit(ClassDeclaration n, A argu) {
       int arg = Integer.valueOf((Integer)argu);
       if(arg == 0)
       {
            n.f0.accept(this, argu);
            n.f1.accept(this, argu);
            current_class = tokenName;
            class_object = new ClassTable();
            n.f2.accept(this, argu);
            n.f3.accept(this, argu);
            n.f4.accept(this, argu);
            n.f5.accept(this, argu);
            classes.put(current_class,class_object);
            class_object = null;
       }
       else if(arg == 1)
       {
            n.f0.accept(this, argu);
            n.f1.accept(this, argu);
            current_class = tokenName;
            class_object = classes.get(current_class);
            //pw.printf("class %s{\n",current_class);
            n.f2.accept(this, argu);
            n.f3.accept(this, argu);
            n.f4.accept(this, argu);
            n.f5.accept(this, argu);
            //pw.printf("}\n");
            class_object = null;
       }
       else
       {
          n.f0.accept(this, argu);
          n.f1.accept(this, argu);
          current_class = tokenName;
          class_object = classes.get(current_class);
          pw.printf("class %s{\n",current_class);
          n.f2.accept(this, argu);
          n.f3.accept(this, argu);
          n.f4.accept(this, argu);
          n.f5.accept(this, argu);
          pw.printf("}\n");
          class_object = null;
       }
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "extends"
    * f3 -> Identifier()
    * f4 -> "{"
    * f5 -> ( VarDeclaration() )*
    * f6 -> ( MethodDeclaration() )*
    * f7 -> "}"
    */
   public void visit(ClassExtendsDeclaration n, A argu) {
       int arg = Integer.valueOf((Integer)argu);
       if(arg == 0)
       {
            n.f0.accept(this, argu);
            n.f1.accept(this, argu);
            current_class = tokenName;
            class_object = new ClassTable();
            n.f2.accept(this, argu);
            n.f3.accept(this, argu);
            String parent_name = tokenName;
            n.f4.accept(this, argu);
            class_object.parent = parent_name;
            n.f5.accept(this, argu);
            n.f6.accept(this, argu);
            n.f7.accept(this, argu);
            classes.put(current_class,class_object);
            class_object = null;
       }
       else if(arg == 1)
       {
            n.f0.accept(this, argu);
            n.f1.accept(this, argu);
            current_class = tokenName;
            class_object = classes.get(current_class);
            n.f2.accept(this, argu);
            n.f3.accept(this, argu);
            String parent_name = tokenName;
            n.f4.accept(this, argu);
            //pw.printf("class %s extends %s{\n",current_class,parent_name);
            n.f5.accept(this, argu);
            n.f6.accept(this, argu);
            n.f7.accept(this, argu);
            //pw.printf("}\n");
            class_object = null;
       }
       else
       {
          n.f0.accept(this, argu);
          n.f1.accept(this, argu);
          current_class = tokenName;
          class_object = classes.get(current_class);
          n.f2.accept(this, argu);
          n.f3.accept(this, argu);
          String parent_name = tokenName;
          n.f4.accept(this, argu);
          pw.printf("class %s extends %s{\n",current_class,parent_name);
          n.f5.accept(this, argu);
          n.f6.accept(this, argu);
          n.f7.accept(this, argu);
          pw.printf("}\n");
          class_object = null;
       }
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    * f2 -> ";"
    */
   public void visit(VarDeclaration n, A argu) {
        int arg = Integer.valueOf((Integer)argu);
        if(arg == 0)
        {
            n.f0.accept(this, argu);
            String ty = tokenName;
            n.f1.accept(this, argu);
            String vn = tokenName;
            n.f2.accept(this, argu);
            if(function_object == null)
                class_object.class_fields.put(vn,ty);
            else
                function_object.local_variables.put(vn,ty);
        }
        else if(arg == 1)
        {
            n.f0.accept(this, argu);
            String ty = tokenName;
            n.f1.accept(this, argu);
            String vn = tokenName;
            n.f2.accept(this, argu);
            //pw.printf("%s %s;\n",ty,vn);
        }
        else
        {
            n.f0.accept(this, argu);
            String ty = tokenName;
            n.f1.accept(this, argu);
            String vn = tokenName;
            n.f2.accept(this, argu);
            pw.printf("%s %s;\n",ty,vn);
        }
   }

   /**
    * f0 -> "public"
    * f1 -> Type()
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( FormalParameterList() )?
    * f5 -> ")"
    * f6 -> "{"
    * f7 -> ( VarDeclaration() )*
    * f8 -> ( Statement() )*
    * f9 -> "return"
    * f10 -> Expression()
    * f11 -> ";"
    * f12 -> "}"
    */
   public void visit(MethodDeclaration n, A argu) {
       int arg = Integer.valueOf((Integer)argu);
       if(arg == 0)
       {
            n.f0.accept(this, argu);
            n.f1.accept(this, argu);
            String rt = tokenName;
            n.f2.accept(this, argu);
            current_function = tokenName;
            function_object = new FunctionTable();
            n.f3.accept(this, argu);
            n.f4.accept(this, argu);
            n.f5.accept(this, argu);
            n.f6.accept(this, argu);
            n.f7.accept(this, argu);
            n.f8.accept(this, argu);
            n.f9.accept(this, argu);
            n.f10.accept(this, argu);
            n.f11.accept(this, argu);
            n.f12.accept(this, argu);
            function_object.return_type = rt;
            class_object.functions.put(current_function,function_object);
            function_object = null;
            current_function = null;
       }
       else if(arg == 1)
       {
            n.f0.accept(this, argu);
            n.f1.accept(this, argu);
            String rt = tokenName;
            n.f2.accept(this, argu);
            current_function = tokenName;
            function_object = class_object.functions.get(current_function);
            function_object.this_identifier = String.format("__local_%d",temp_id_cnt++);
            function_object.temp_locals.put(function_object.this_identifier,current_class);
            //pw.printf("public %s %s(",rt,current_function);
            n.f3.accept(this, argu);
            n.f4.accept(this, argu);
            n.f5.accept(this, argu);
            //pw.printf("){\n");
            n.f6.accept(this, argu);
            n.f7.accept(this, argu);
            n.f8.accept(this, argu);
            n.f9.accept(this, argu);
            n.f10.accept(this, argu);
            n.f11.accept(this, argu);
            n.f12.accept(this, argu);
            //pw.printf("return %s;\n}\n",temp_identifier);
            function_object = null;
            current_function = null;
       }
       else
       {
          n.f0.accept(this, argu);
          n.f1.accept(this, argu);
          String rt = tokenName;
          n.f2.accept(this, argu);
          current_function = tokenName;
          function_object = class_object.functions.get(current_function);
          temp_id_cnt++;
          pw.printf("public %s %s(",rt,current_function);
          n.f3.accept(this, argu);
          n.f4.accept(this, argu);
          n.f5.accept(this, argu);
          pw.printf("){\n");
          function_object.temp_locals.forEach((k,v) ->{
               pw.printf("%s %s;\n",v,k);
          });//print out all function local variables
          n.f6.accept(this, argu);
          n.f7.accept(this, argu);
          pw.printf("%s = this;\n",function_object.this_identifier);
          n.f8.accept(this, argu);
          n.f9.accept(this, argu);
          n.f10.accept(this, argu);
          n.f11.accept(this, argu);
          n.f12.accept(this, argu);
          pw.printf("return %s;\n}\n",temp_identifier);
          function_object = null;
          current_function = null;
       }
   }

   /**
    * f0 -> FormalParameter()
    * f1 -> ( FormalParameterRest() )*
    */
   public void visit(FormalParameterList n, A argu) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    */
   public void visit(FormalParameter n, A argu) {
      int arg = Integer.valueOf((Integer)argu);
      if(arg == 0)
      {
        n.f0.accept(this, argu);
        String rt = tokenName;
        n.f1.accept(this, argu);
        String id = tokenName;
        function_object.function_arguments.put(id,rt);
      }
      else if(arg == 1)
      {
        n.f0.accept(this,argu);
        String ty = tokenName;
        n.f1.accept(this,argu);
        String id = tokenName;
        //pw.printf("%s %s",ty,id);
      }
      else
      {
        n.f0.accept(this,argu);
        String ty = tokenName;
        n.f1.accept(this,argu);
        String id = tokenName;
        pw.printf("%s %s",ty,id);
      }
   }

   /**
    * f0 -> ","
    * f1 -> FormalParameter()
    */
   public void visit(FormalParameterRest n, A argu) {
       int arg = Integer.valueOf((Integer)argu);
       if(arg == 0)
       {
            n.f0.accept(this, argu);
            n.f1.accept(this,argu);
       }
       else if(arg == 1)
       {
           n.f0.accept(this,argu);
           //pw.printf(",");
           n.f1.accept(this,argu);
       }
       else
       {
          n.f0.accept(this,argu);
          pw.printf(",");
          n.f1.accept(this,argu);
       }
   }

   /**
    * f0 -> ArrayType()
    *       | BooleanType()
    *       | IntegerType()
    *       | Identifier()
    */
   public void visit(Type n, A argu) {
      n.f0.accept(this, argu);
   }

   /**
    * f0 -> "int"
    * f1 -> "["
    * f2 -> "]"
    */
   public void visit(ArrayType n, A argu) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      tokenName = "int[]";
   }

   /**
    * f0 -> "boolean"
    */
   public void visit(BooleanType n, A argu) {
      n.f0.accept(this, argu);
      tokenName = "boolean";
   }

   /**
    * f0 -> "int"
    */
   public void visit(IntegerType n, A argu) {
      n.f0.accept(this, argu);
      tokenName = "int";
   }

   /**
    * f0 -> Block()
    *       | AssignmentStatement()
    *       | ArrayAssignmentStatement()
    *       | FieldAssignmentStatement()
    *       | IfStatement()
    *       | WhileStatement()
    *       | ForStatement()
    *       | PrintStatement()
    */
   public void visit(Statement n, A argu) {
      n.f0.accept(this, argu);
   }

   /**
    * f0 -> "{"
    * f1 -> ( Statement() )*
    * f2 -> "}"
    */
   public void visit(Block n, A argu) {
       int arg = Integer.valueOf((Integer)argu);
       if(arg == 0)
       {
            n.f0.accept(this, argu);
            n.f1.accept(this, argu);
            n.f2.accept(this, argu);
       }
       else if(arg == 1)
       {
            n.f0.accept(this, argu);
            //pw.printf("{\n");
            n.f1.accept(this, argu);
            n.f2.accept(this, argu);
            //pw.printf("}\n");
       }
       else
       {
          n.f0.accept(this, argu);
          pw.printf("{\n");
          n.f1.accept(this, argu);
          n.f2.accept(this, argu);
          pw.printf("}\n");
       }
   }

   /**
    * f0 -> Identifier()
    * f1 -> "="
    * f2 -> Expression()
    * f3 -> ";"
    */
   public void visit(AssignmentStatement n, A argu) {
       int arg = Integer.valueOf((Integer)argu);
       if(arg == 0)
       {
            n.f0.accept(this, argu);
            n.f1.accept(this, argu);
            n.f2.accept(this, argu);
            n.f3.accept(this, argu);
       }
       else if(arg == 1)
       {
            n.f0.accept(this, argu);
            String id = tokenName;
            n.f1.accept(this, argu);
            n.f2.accept(this, argu);
            String t = temp_identifier;
            //pw.printf("%s = %s;\n",id,t);
            n.f3.accept(this, argu);
       }
       else
       {
          n.f0.accept(this, argu);
          String id = tokenName;
          n.f1.accept(this, argu);
          n.f2.accept(this, argu);
          String t = temp_identifier;
          pw.printf("%s = %s;\n",id,t);
          n.f3.accept(this, argu);
       }
   }

   /**
    * f0 -> Identifier()
    * f1 -> "["
    * f2 -> Expression()
    * f3 -> "]"
    * f4 -> "="
    * f5 -> Expression()
    * f6 -> ";"
    */
   public void visit(ArrayAssignmentStatement n, A argu) {
       int arg = Integer.valueOf((Integer)argu);
       if(arg == 0)
       {
            n.f0.accept(this, argu);
            n.f1.accept(this, argu);
            n.f2.accept(this, argu);
            n.f3.accept(this, argu);
            n.f4.accept(this, argu);
            n.f5.accept(this, argu);
            n.f6.accept(this, argu);
       }
       else if(arg == 1)
       {
            n.f0.accept(this, argu);
            String id = tokenName;
            n.f1.accept(this, argu);
            n.f2.accept(this, argu);
            String ind = temp_identifier;
            n.f3.accept(this, argu);
            n.f4.accept(this, argu);
            n.f5.accept(this, argu);
            String va = temp_identifier;
            n.f6.accept(this, argu);
            //pw.printf("%s[%s] = %s;\n",id,ind,va);
       }
       else
       {
          n.f0.accept(this, argu);
          String id = tokenName;
          n.f1.accept(this, argu);
          n.f2.accept(this, argu);
          String ind = temp_identifier;
          n.f3.accept(this, argu);
          n.f4.accept(this, argu);
          n.f5.accept(this, argu);
          String va = temp_identifier;
          n.f6.accept(this, argu);
          pw.printf("%s[%s] = %s;\n",id,ind,va);
       }
   }

   /**
    * f0 -> Expression()
    * f1 -> "."
    * f2 -> Identifier()
    * f3 -> "="
    * f4 -> Expression()
    * f5 -> ";"
    */
   public void visit(FieldAssignmentStatement n, A argu) {
       int arg = Integer.valueOf((Integer)argu);
       if(arg == 0)
       {
            n.f0.accept(this, argu);
            n.f1.accept(this, argu);
            n.f2.accept(this, argu);
            n.f3.accept(this, argu);
            n.f4.accept(this, argu);
            n.f5.accept(this, argu);
       }
       else if(arg == 1)
       {
            n.f0.accept(this, argu);
            String ob = temp_identifier;
            n.f1.accept(this, argu);
            n.f2.accept(this, argu);
            String id = tokenName;
            n.f3.accept(this, argu);
            n.f4.accept(this, argu);
            String exp_id = temp_identifier;
            //pw.printf("%s.%s = %s;\n",ob,id,exp_id);
            n.f5.accept(this, argu);
       }
       else
       {
            n.f0.accept(this, argu);
            String ob = temp_identifier;
            n.f1.accept(this, argu);
            n.f2.accept(this, argu);
            String id = tokenName;
            n.f3.accept(this, argu);
            n.f4.accept(this, argu);
            String exp_id = temp_identifier;
            pw.printf("%s.%s = %s;\n",ob,id,exp_id);
            n.f5.accept(this, argu);  
       }
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    * f5 -> "else"
    * f6 -> Statement()
    */
   public void visit(IfStatement n, A argu) {
       int arg = Integer.valueOf((Integer)argu);
       if(arg == 0)
       {
            n.f0.accept(this, argu);
            n.f1.accept(this, argu);
            n.f2.accept(this, argu);
            n.f3.accept(this, argu);
            n.f4.accept(this, argu);
            n.f5.accept(this, argu);
            n.f6.accept(this, argu);
       }
       else if(arg == 1)
       {
            n.f0.accept(this, argu);
            n.f1.accept(this, argu);
            n.f2.accept(this, argu);
            n.f3.accept(this, argu);
            String ex_id = temp_identifier;
            //pw.printf("if(%s){\n",ex_id);
            n.f4.accept(this, argu);
            //pw.printf("}\nelse{\n");
            n.f5.accept(this, argu);
            n.f6.accept(this, argu);
            //pw.printf("}\n");
       }
       else
       {
          n.f0.accept(this, argu);
            n.f1.accept(this, argu);
            n.f2.accept(this, argu);
            n.f3.accept(this, argu);
            String ex_id = temp_identifier;
            pw.printf("if(%s){\n",ex_id);
            n.f4.accept(this, argu);
            pw.printf("}\nelse{\n");
            n.f5.accept(this, argu);
            n.f6.accept(this, argu);
            pw.printf("}\n");
       }
   }

   /**
    * f0 -> "while"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public void visit(WhileStatement n, A argu) {
       int arg = Integer.valueOf((Integer)argu);
       if(arg == 0)
       {
            n.f0.accept(this, argu);
            n.f1.accept(this, argu);
            n.f2.accept(this, argu);
            n.f3.accept(this, argu);
            n.f4.accept(this, argu);
       }
       else if(arg == 1)
       {
            //careful, regenerate expression code within the loop context!
            n.f0.accept(this, argu);
            n.f1.accept(this, argu);
            n.f2.accept(this, argu);
            String exp_id = temp_identifier;
            //pw.printf("while(%s){\n",exp_id);
            n.f3.accept(this, argu);
            n.f4.accept(this, argu);
            n.f2.accept(this, argu);
            String exp_id1 = temp_identifier;
            //pw.printf("%s = %s;\n",exp_id,exp_id1);
            //pw.printf("}\n");
       }
       else
       {
            n.f0.accept(this, argu);
            n.f1.accept(this, argu);
            n.f2.accept(this, argu);
            String exp_id = temp_identifier;
            pw.printf("while(%s){\n",exp_id);
            n.f3.accept(this, argu);
            n.f4.accept(this, argu);
            n.f2.accept(this, argu);
            String exp_id1 = temp_identifier;
            pw.printf("%s = %s;\n",exp_id,exp_id1);
            pw.printf("}\n");
       }
   }

   /**
    * f0 -> "for"
    * f1 -> "("
    * f2 -> Identifier()
    * f3 -> "="
    * f4 -> Expression()
    * f5 -> ";"
    * f6 -> Expression()
    * f7 -> ";"
    * f8 -> Identifier()
    * f9 -> "="
    * f10 -> Expression()
    * f11 -> ")"
    * f12 -> Statement()
    */
   public void visit(ForStatement n, A argu) {
       int arg = Integer.valueOf((Integer)argu);
       if(arg == 0)
       {
            n.f0.accept(this, argu);
            n.f1.accept(this, argu);
            n.f2.accept(this, argu);
            n.f3.accept(this, argu);
            n.f4.accept(this, argu);
            n.f5.accept(this, argu);
            n.f6.accept(this, argu);
            n.f7.accept(this, argu);
            n.f8.accept(this, argu);
            n.f9.accept(this, argu);
            n.f10.accept(this, argu);
            n.f11.accept(this, argu);
            n.f12.accept(this, argu);
       }
       else if(arg == 1)
       {
            //regenerate expression code for update and condition test within the loop context.
            n.f0.accept(this, argu);
            n.f1.accept(this, argu);
            n.f2.accept(this, argu);
            String id1 = tokenName;
            n.f3.accept(this, argu);
            n.f4.accept(this, argu);
            String ex_id1 = temp_identifier;
            n.f5.accept(this, argu);
            n.f6.accept(this, argu);
            String ex_id2 = temp_identifier;
            n.f7.accept(this, argu);
            n.f11.accept(this, argu);
            //pw.printf("for(%s = %s; %s; %s = %s){\n",id1,ex_id1,ex_id2,id2,ex_id3);
            n.f12.accept(this, argu);
            n.f8.accept(this,argu);
            String id = tokenName;
            n.f9.accept(this,argu);
            n.f10.accept(this,argu);
            String tr = temp_identifier;
            //pw.printf("%s = %s;\n",id,tr);
            n.f6.accept(this,argu);
            String exp_id = temp_identifier;
            //pw.printf("%s = %s;\n",ex_id1,exp_id);
            //pw.printf("}\n");
       }
       else
       {
          n.f0.accept(this, argu);
          n.f1.accept(this, argu);
          n.f2.accept(this, argu);
          String id1 = tokenName;
          n.f3.accept(this, argu);
          n.f4.accept(this, argu);
          String ex_id1 = temp_identifier;
          pw.printf("%s = %s;\n",id1,ex_id1);//initialise first before condition check
          n.f5.accept(this, argu);
          n.f6.accept(this, argu);
          String ex_id2 = temp_identifier;
          n.f7.accept(this, argu);
          n.f11.accept(this, argu);
          pw.printf("while(%s){\n",ex_id2);//change each for loop to a while loop
          n.f12.accept(this, argu);
          n.f8.accept(this,argu);
          String id = tokenName;
          n.f9.accept(this,argu);
          n.f10.accept(this,argu);
          String tr = temp_identifier;
          pw.printf("%s = %s;\n",id,tr);
          n.f6.accept(this,argu);
          String exp_id = temp_identifier;
          pw.printf("%s = %s;\n",ex_id2,exp_id);
          pw.printf("}\n");
       }
   }

   /**
    * f0 -> "System.out.println"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> ";"
    */
   public void visit(PrintStatement n, A argu) {
       int arg = Integer.valueOf((Integer)argu);
       if(arg == 0)
       {
            n.f0.accept(this, argu);
            n.f1.accept(this, argu);
            n.f2.accept(this, argu);
            n.f3.accept(this, argu);
            n.f4.accept(this, argu);
       }
       else if(arg == 1)
       {
            n.f0.accept(this, argu);
            n.f1.accept(this, argu);
            n.f2.accept(this, argu);
            n.f3.accept(this, argu);
            String ex_id = temp_identifier;
            n.f4.accept(this, argu);
            //pw.printf("System.out.println(%s);\n",ex_id);
       }
       else
       {
          n.f0.accept(this, argu);
          n.f1.accept(this, argu);
          n.f2.accept(this, argu);
          n.f3.accept(this, argu);
          String ex_id = temp_identifier;
          n.f4.accept(this, argu);
          pw.printf("System.out.println(%s);\n",ex_id);
       }
   }

   /**
    * f0 -> AndExpression()
    *       | CompareExpression()
    *       | PlusExpression()s
    *       | MinusExpression()
    *       | TimesExpression()
    *       | ArrayLookup()
    *       | ArrayLength()
    *       | MessageSend()
    *       | PrimaryExpression()
    */
   public void visit(Expression n, A argu) {
      n.f0.accept(this, argu);
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "&"
    * f2 -> PrimaryExpression()
    */
   public void visit(AndExpression n, A argu) {
       int arg = Integer.valueOf((Integer)argu);
       if(arg == 0)
       {
            n.f0.accept(this, argu);
            n.f1.accept(this, argu);
            n.f2.accept(this, argu);
       }
       else if(arg == 1)
       {
            n.f0.accept(this, argu);
            String id1 = temp_identifier;
            n.f1.accept(this, argu);
            n.f2.accept(this, argu);
            String id2 = temp_identifier;
            int id3 = temp_id_cnt++;
            //pw.printf("boolean __local_%d = %s & %s;\n",id3,id1,id2);
            type_of_expr = "boolean";
            temp_identifier = String.format("__local_%d",id3);
            function_object.temp_locals.put(temp_identifier,type_of_expr);
       }
       else
       {
          n.f0.accept(this, argu);
          String id1 = temp_identifier;
          n.f1.accept(this, argu);
          n.f2.accept(this, argu);
          String id2 = temp_identifier;
          int id3 = temp_id_cnt++;
          pw.printf("__local_%d = %s & %s;\n",id3,id1,id2);
          type_of_expr = "boolean";
          temp_identifier = String.format("__local_%d",id3);
       }
      
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "<"
    * f2 -> PrimaryExpression()
    */
   public void visit(CompareExpression n, A argu) {
    int arg = Integer.valueOf((Integer)argu);
    if(arg == 0)
    {
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
    }
    else if(arg == 1)
    {
         n.f0.accept(this, argu);
         String id1 = temp_identifier;
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         String id2 = temp_identifier;
         int id3 = temp_id_cnt++;
         //pw.printf("boolean __local_%d = %s < %s;\n",id3,id1,id2);
         type_of_expr = "boolean";
         temp_identifier = String.format("__local_%d",id3);
         function_object.temp_locals.put(temp_identifier,type_of_expr);
    }
    else
    {
          n.f0.accept(this, argu);
          String id1 = temp_identifier;
          n.f1.accept(this, argu);
          n.f2.accept(this, argu);
          String id2 = temp_identifier;
          int id3 = temp_id_cnt++;
          pw.printf("__local_%d = %s < %s;\n",id3,id1,id2);
          type_of_expr = "boolean";
          temp_identifier = String.format("__local_%d",id3);
    }
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "+"
    * f2 -> PrimaryExpression()
    */
   public void visit(PlusExpression n, A argu) {
    int arg = Integer.valueOf((Integer)argu);
    if(arg == 0)
    {
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
    }
    else if(arg == 1)
    {
         n.f0.accept(this, argu);
         String id1 = temp_identifier;
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         String id2 = temp_identifier;
         int id3 = temp_id_cnt++;
         //pw.printf("int __local_%d = %s + %s;\n",id3,id1,id2);
         type_of_expr = "int";
         temp_identifier = String.format("__local_%d",id3);
         function_object.temp_locals.put(temp_identifier,type_of_expr);
    }
    else
    {
          n.f0.accept(this, argu);
          String id1 = temp_identifier;
          n.f1.accept(this, argu);
          n.f2.accept(this, argu);
          String id2 = temp_identifier;
          int id3 = temp_id_cnt++;
          pw.printf("__local_%d = %s + %s;\n",id3,id1,id2);
          type_of_expr = "int";
          temp_identifier = String.format("__local_%d",id3);
    }
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "-"
    * f2 -> PrimaryExpression()
    */
   public void visit(MinusExpression n, A argu) {
    int arg = Integer.valueOf((Integer)argu);
    if(arg == 0)
    {
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
    }
    else if(arg == 1)
    {
         n.f0.accept(this, argu);
         String id1 = temp_identifier;
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         String id2 = temp_identifier;
         int id3 = temp_id_cnt++;
         //pw.printf("int __local_%d = %s - %s;\n",id3,id1,id2);
         type_of_expr = "int";
         temp_identifier = String.format("__local_%d",id3);
         function_object.temp_locals.put(temp_identifier,type_of_expr);
    }
    else
    {
          n.f0.accept(this, argu);
          String id1 = temp_identifier;
          n.f1.accept(this, argu);
          n.f2.accept(this, argu);
          String id2 = temp_identifier;
          int id3 = temp_id_cnt++;
          pw.printf("__local_%d = %s - %s;\n",id3,id1,id2);
          type_of_expr = "int";
          temp_identifier = String.format("__local_%d",id3);
    }
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "*"
    * f2 -> PrimaryExpression()
    */
   public void visit(TimesExpression n, A argu) {
    int arg = Integer.valueOf((Integer)argu);
    if(arg == 0)
    {
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
    }
    else if(arg == 1)
    {
         n.f0.accept(this, argu);
         String id1 = temp_identifier;
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         String id2 = temp_identifier;
         int id3 = temp_id_cnt++;
         //pw.printf("int __local_%d = %s * %s;\n",id3,id1,id2);
         type_of_expr = "int";
         temp_identifier = String.format("__local_%d",id3);
         function_object.temp_locals.put(temp_identifier,type_of_expr);
    }
    else
    {
          n.f0.accept(this, argu);
          String id1 = temp_identifier;
          n.f1.accept(this, argu);
          n.f2.accept(this, argu);
          String id2 = temp_identifier;
          int id3 = temp_id_cnt++;
          pw.printf("__local_%d = %s * %s;\n",id3,id1,id2);
          type_of_expr = "int";
          temp_identifier = String.format("__local_%d",id3);
    }
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "["
    * f2 -> PrimaryExpression()
    * f3 -> "]"
    */
   public void visit(ArrayLookup n, A argu) {
    int arg = Integer.valueOf((Integer)argu);
    if(arg == 0)
    {
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
    }
    else if(arg == 1)
    {
         n.f0.accept(this, argu);
         String id1 = temp_identifier;
         String ty = type_of_expr;
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         String id2 = temp_identifier;
         n.f3.accept(this,argu);
         int id3 = temp_id_cnt++;
         //pw.printf("int __local_%d = %s[%s];\n",id3,id1,id2);
         type_of_expr = "int";//only integer arrays
         temp_identifier = String.format("__local_%d",id3);
         function_object.temp_locals.put(temp_identifier,type_of_expr);
    }
    else
    {
          n.f0.accept(this, argu);
          String id1 = temp_identifier;
          String ty = type_of_expr;
          n.f1.accept(this, argu);
          n.f2.accept(this, argu);
          String id2 = temp_identifier;
          n.f3.accept(this,argu);
          int id3 = temp_id_cnt++;
          pw.printf("__local_%d = %s[%s];\n",id3,id1,id2);
          type_of_expr = "int";//only integer arrays
          temp_identifier = String.format("__local_%d",id3);
    }
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> "length"
    */
   public void visit(ArrayLength n, A argu) {
    int arg = Integer.valueOf((Integer)argu);
    if(arg == 0)
    {
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
    }
    else if(arg == 1)
    {
         n.f0.accept(this, argu);
         String id1 = temp_identifier;
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         int id3 = temp_id_cnt++;
         //pw.printf("int __local_%d = %s.length;\n",id3,id1);
         type_of_expr = "int";
         temp_identifier = String.format("__local_%d",id3);
         function_object.temp_locals.put(temp_identifier,type_of_expr);
    }
    else
    {
          n.f0.accept(this, argu);
          String id1 = temp_identifier;
          n.f1.accept(this, argu);
          n.f2.accept(this, argu);
          int id3 = temp_id_cnt++;
          pw.printf("__local_%d = %s.length;\n",id3,id1);
          type_of_expr = "int";
          temp_identifier = String.format("__local_%d",id3);
    }
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( ExpressionList() )?
    * f5 -> ")"
    */
   public void visit(MessageSend n, A argu) {
       int arg = Integer.valueOf((Integer)argu);
       if(arg == 0)
       {
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        n.f3.accept(this, argu);
        n.f4.accept(this, argu);
        n.f5.accept(this, argu);
       }
       else if(arg == 1)
       {
            n.f0.accept(this, argu);
            String cl = temp_identifier;
            String ob_type = type_of_expr;
            n.f1.accept(this, argu);
            n.f2.accept(this, argu);
            String fn_called = tokenName;
            int os = call_arguments.size();
            n.f3.accept(this, argu);
            n.f4.accept(this, argu);
            n.f5.accept(this, argu);
            int i;
            String rt = get_return_type(ob_type,fn_called);
            int id = temp_id_cnt++;
            //pw.printf("%s __local_%d = %s.%s(",rt,id,cl,fn_called);
            int ns = call_arguments.size();
            for(i = os;i < ns;i++)
            {
                if(i != ns-1);
                    //pw.printf("%s,",call_arguments.get(i));
                else;
                    //pw.printf("%s",call_arguments.get(i));
            }
            while(ns != os)
            {
                call_arguments.remove(ns-1);
                ns--;
            }
            //pw.printf(");\n");
            type_of_expr = rt;
            temp_identifier = String.format("__local_%d",id);
            function_object.temp_locals.put(temp_identifier,type_of_expr);
       }
       else
       {
            n.f0.accept(this, argu);
            String cl = temp_identifier;
            String ob_type = type_of_expr;
            n.f1.accept(this, argu);
            n.f2.accept(this, argu);
            String fn_called = tokenName;
            int os = call_arguments.size();
            n.f3.accept(this, argu);
            n.f4.accept(this, argu);
            n.f5.accept(this, argu);
            int i;
            String rt = get_return_type(ob_type,fn_called);
            int id = temp_id_cnt++;
            pw.printf("__local_%d = %s.%s(",id,cl,fn_called);
            int ns = call_arguments.size();
            for(i = os;i < ns;i++)
            {
                if(i != ns-1)
                    pw.printf("%s,",call_arguments.get(i));
                else
                    pw.printf("%s",call_arguments.get(i));
            }
            while(ns != os)
            {
                call_arguments.remove(ns-1);
                ns--;
            }
            pw.printf(");\n");
            type_of_expr = rt;
            temp_identifier = String.format("__local_%d",id);
       }
   }

   /**
    * f0 -> Expression()
    * f1 -> ( ExpressionRest() )*
    */
   public void visit(ExpressionList n, A argu) {
       int arg = Integer.valueOf((Integer)argu);
       if(arg == 0)
       {
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
       }
       else//for both passes we can do so
       {
           n.f0.accept(this,argu);
           call_arguments.add(temp_identifier);
           n.f1.accept(this,argu);
       }
   }

   /**
    * f0 -> ","
    * f1 -> Expression()
    */
   public void visit(ExpressionRest n, A argu) {
       int arg = Integer.valueOf((Integer)argu);
       if(arg == 0)
       {
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
       }
       else//do so for both passes
       {
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        call_arguments.add(temp_identifier);
       }
   }

   /**
    * f0 -> IntegerLiteral()
    *       | TrueLiteral()
    *       | FalseLiteral()
    *       | Identifier()
    *       | ThisExpression()
    *       | ArrayAllocationExpression()
    *       | AllocationExpression()
    *       | NotExpression()
    *       | BracketExpression()
    */
   public void visit(PrimaryExpression n, A argu) {
      n.f0.accept(this, argu);
      int arg = Integer.valueOf((Integer)argu);
      if((n.f0.which == 3) && (arg >= 1))
      {
          //identifier was encountered, so obtain the type information alone.
          type_of_expr = get_type(tokenName);
          temp_identifier = tokenName; 
      }
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public void visit(IntegerLiteral n, A argu) {
       int arg = Integer.valueOf((Integer)argu);
       if(arg == 0)
            n.f0.accept(this, argu);
        else if(arg == 1)
        {
            int id = temp_id_cnt++;
            n.f0.accept(this,argu);
            temp_identifier = String.format("__local_%d",id);
            //pw.printf("int %s = %s;\n",temp_identifier,tokenName);
            type_of_expr = "int";
            function_object.temp_locals.put(temp_identifier,type_of_expr);
        }
        else
        {
            int id = temp_id_cnt++;
            n.f0.accept(this,argu);
            temp_identifier = String.format("__local_%d",id);
            pw.printf("%s = %s;\n",temp_identifier,tokenName);
            type_of_expr = "int";
        }
   }

   /**
    * f0 -> "true"
    */
   public void visit(TrueLiteral n, A argu) {
    int arg = Integer.valueOf((Integer)argu);
    if(arg == 0)
         n.f0.accept(this, argu);
     else if(arg == 1)
     {
         int id = temp_id_cnt++;
         temp_identifier = String.format("__local_%d",id);
         //pw.printf("boolean %s = true;\n",temp_identifier);
         type_of_expr = "boolean";
         function_object.temp_locals.put(temp_identifier,type_of_expr);
     }
     else
     {
         int id = temp_id_cnt++;
         temp_identifier = String.format("__local_%d",id);
         pw.printf("%s = true;\n",temp_identifier);
         type_of_expr = "boolean";
     }
   }

   /**
    * f0 -> "false"
    */
   public void visit(FalseLiteral n, A argu) {
    int arg = Integer.valueOf((Integer)argu);
    if(arg == 0)
         n.f0.accept(this, argu);
     else if(arg == 1)
     {
         int id = temp_id_cnt++;
         temp_identifier = String.format("__local_%d",id);
         //pw.printf("boolean %s = false;\n",temp_identifier);
         type_of_expr = "boolean";
         function_object.temp_locals.put(temp_identifier,type_of_expr);
     }
     else
     {
         int id = temp_id_cnt++;
         temp_identifier = String.format("__local_%d",id);
         pw.printf("%s = false;\n",temp_identifier);
         type_of_expr = "boolean";
     }
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public void visit(Identifier n, A argu) {
      n.f0.accept(this, argu);
   }

   /**
    * f0 -> "this"
    */
   public void visit(ThisExpression n, A argu) {
        int arg = Integer.valueOf((Integer)argu);
        if(arg == 0)
        {
          n.f0.accept(this, argu);
        }
        else
        {
          n.f0.accept(this, argu);
          type_of_expr = current_class;
          temp_identifier = function_object.this_identifier;
        }
   }

   /**
    * f0 -> "new"
    * f1 -> "int"
    * f2 -> "["
    * f3 -> Expression()
    * f4 -> "]"
    */
   public void visit(ArrayAllocationExpression n, A argu) {
       int arg = Integer.valueOf((Integer)argu);
       if(arg == 0)
       {
            n.f0.accept(this, argu);
            n.f1.accept(this, argu);
            n.f2.accept(this, argu);
            n.f3.accept(this, argu);
            n.f4.accept(this, argu);
       }
       else if(arg == 1)
       {
            n.f0.accept(this, argu);
            n.f1.accept(this, argu);
            n.f2.accept(this, argu);
            n.f3.accept(this, argu);
            String id = temp_identifier;
            n.f4.accept(this, argu);
            int rg = temp_id_cnt++;
            temp_identifier = String.format("__local_%d",rg);
            //pw.printf("int[] %s = new int[%s];\n",temp_identifier,id);
            type_of_expr = "int[]";
            function_object.temp_locals.put(temp_identifier,type_of_expr);
            
       }
       else
       {
          n.f0.accept(this, argu);
          n.f1.accept(this, argu);
          n.f2.accept(this, argu);
          n.f3.accept(this, argu);
          String id = temp_identifier;
          n.f4.accept(this, argu);
          int rg = temp_id_cnt++;
          temp_identifier = String.format("__local_%d",rg);
          pw.printf("%s = new int[%s];\n",temp_identifier,id);
          type_of_expr = "int[]";
       }
   }

   /**
    * f0 -> "new"
    * f1 -> Identifier()
    * f2 -> "("
    * f3 -> ")"
    */
   public void visit(AllocationExpression n, A argu) {
       int arg = Integer.valueOf((Integer)argu);
       if(arg == 0)
       {
            n.f0.accept(this, argu);
            n.f1.accept(this, argu);
            n.f2.accept(this, argu);
            n.f3.accept(this, argu);
       }
       else if(arg == 1)
       {
            n.f0.accept(this, argu);
            n.f1.accept(this, argu);
            String id = tokenName;
            n.f2.accept(this, argu);
            n.f3.accept(this, argu);
            int rg = temp_id_cnt++;
            temp_identifier = String.format("__local_%d",rg);
            //pw.printf("%s %s = new %s();\n",id,temp_identifier,id);
            type_of_expr = id;
            function_object.temp_locals.put(temp_identifier,type_of_expr);
       }
       else
       {
          n.f0.accept(this, argu);
          n.f1.accept(this, argu);
          String id = tokenName;
          n.f2.accept(this, argu);
          n.f3.accept(this, argu);
          int rg = temp_id_cnt++;
          temp_identifier = String.format("__local_%d",rg);
          pw.printf("%s = new %s();\n",temp_identifier,id);
          type_of_expr = id;
       }
   }

   /**
    * f0 -> "!"
    * f1 -> ( MessageSend() | PrimaryExpression() )
    */
   public void visit(NotExpression n, A argu) {
       int arg = Integer.valueOf((Integer)argu);
       if(arg == 0)
       {
            n.f0.accept(this, argu);
            n.f1.accept(this, argu);
       }
       else if(arg == 1)
       {
            n.f0.accept(this, argu);
            n.f1.accept(this, argu);
            //pw.printf("%s = !%s;\n",temp_identifier,temp_identifier);
            type_of_expr = "boolean";
       }
       else
       {
            n.f0.accept(this, argu);
            n.f1.accept(this, argu);
            pw.printf("%s = !%s;\n",temp_identifier,temp_identifier);
            type_of_expr = "boolean";
       }
   }

   /**
    * f0 -> "("
    * f1 -> Expression()
    * f2 -> ")"
    */
   public void visit(BracketExpression n, A argu) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
   }

}
